// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  role               UserRole             @default(USER)
  status             UserStatus           @default(ACTIVE)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  trip               Trip[]
  userProfile        UserProfile?
  travelBuddyRequest TravelBuddyRequest[]

  @@map("users")
}

model UserProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  bio        String
  age        Int
  profileImg String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("userProfiles")
}

model Trip {
  id                String   @id @default(uuid())
  userId            String
  destination       String
  startDate         DateTime
  endDate           DateTime
  budget            Int
  activities        String[]
  description       String
  type              TripType
  thumbnail         String
  touristPlaceImage String[]
  itinerary         Json[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user               User                 @relation(fields: [userId], references: [id])
  travelBuddyRequest TravelBuddyRequest[]

  @@map("trips")
}

model TravelBuddyRequest {
  id        String                   @id @default(uuid())
  tripId    String
  userId    String
  status    TravelBuddyRequestStatus @default(PENDING)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  trip Trip @relation(fields: [tripId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("travelBuddyRequests")
}

enum TravelBuddyRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum TripType {
  BUSINESS
  LUXURY
  STUDY
  FAMILY
}

// OK
